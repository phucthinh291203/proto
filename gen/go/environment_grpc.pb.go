// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/environment.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvironmentSrv_Create_FullMethodName = "/protobuf.EnvironmentSrv/Create"
	EnvironmentSrv_Read_FullMethodName   = "/protobuf.EnvironmentSrv/Read"
	EnvironmentSrv_List_FullMethodName   = "/protobuf.EnvironmentSrv/List"
	EnvironmentSrv_Update_FullMethodName = "/protobuf.EnvironmentSrv/Update"
)

// EnvironmentSrvClient is the client API for EnvironmentSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentSrvClient interface {
	Create(ctx context.Context, in *CreateEnvironmentReq, opts ...grpc.CallOption) (*CreateEnvironmentRes, error)
	Read(ctx context.Context, in *ReadEnvironmentReq, opts ...grpc.CallOption) (*ReadEnvironmentRes, error)
	List(ctx context.Context, in *ListEnvironmentReq, opts ...grpc.CallOption) (*ListEnvironmentRes, error)
	Update(ctx context.Context, in *UpdateEnvironmentReq, opts ...grpc.CallOption) (*UpdateEnvironmentRes, error)
}

type environmentSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentSrvClient(cc grpc.ClientConnInterface) EnvironmentSrvClient {
	return &environmentSrvClient{cc}
}

func (c *environmentSrvClient) Create(ctx context.Context, in *CreateEnvironmentReq, opts ...grpc.CallOption) (*CreateEnvironmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentRes)
	err := c.cc.Invoke(ctx, EnvironmentSrv_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSrvClient) Read(ctx context.Context, in *ReadEnvironmentReq, opts ...grpc.CallOption) (*ReadEnvironmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadEnvironmentRes)
	err := c.cc.Invoke(ctx, EnvironmentSrv_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSrvClient) List(ctx context.Context, in *ListEnvironmentReq, opts ...grpc.CallOption) (*ListEnvironmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentRes)
	err := c.cc.Invoke(ctx, EnvironmentSrv_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentSrvClient) Update(ctx context.Context, in *UpdateEnvironmentReq, opts ...grpc.CallOption) (*UpdateEnvironmentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnvironmentRes)
	err := c.cc.Invoke(ctx, EnvironmentSrv_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentSrvServer is the server API for EnvironmentSrv service.
// All implementations must embed UnimplementedEnvironmentSrvServer
// for forward compatibility.
type EnvironmentSrvServer interface {
	Create(context.Context, *CreateEnvironmentReq) (*CreateEnvironmentRes, error)
	Read(context.Context, *ReadEnvironmentReq) (*ReadEnvironmentRes, error)
	List(context.Context, *ListEnvironmentReq) (*ListEnvironmentRes, error)
	Update(context.Context, *UpdateEnvironmentReq) (*UpdateEnvironmentRes, error)
	mustEmbedUnimplementedEnvironmentSrvServer()
}

// UnimplementedEnvironmentSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentSrvServer struct{}

func (UnimplementedEnvironmentSrvServer) Create(context.Context, *CreateEnvironmentReq) (*CreateEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEnvironmentSrvServer) Read(context.Context, *ReadEnvironmentReq) (*ReadEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedEnvironmentSrvServer) List(context.Context, *ListEnvironmentReq) (*ListEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEnvironmentSrvServer) Update(context.Context, *UpdateEnvironmentReq) (*UpdateEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEnvironmentSrvServer) mustEmbedUnimplementedEnvironmentSrvServer() {}
func (UnimplementedEnvironmentSrvServer) testEmbeddedByValue()                        {}

// UnsafeEnvironmentSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentSrvServer will
// result in compilation errors.
type UnsafeEnvironmentSrvServer interface {
	mustEmbedUnimplementedEnvironmentSrvServer()
}

func RegisterEnvironmentSrvServer(s grpc.ServiceRegistrar, srv EnvironmentSrvServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvironmentSrv_ServiceDesc, srv)
}

func _EnvironmentSrv_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSrvServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSrv_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSrvServer).Create(ctx, req.(*CreateEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSrv_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSrvServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSrv_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSrvServer).Read(ctx, req.(*ReadEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSrv_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSrvServer).List(ctx, req.(*ListEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentSrv_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentSrvServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentSrv_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentSrvServer).Update(ctx, req.(*UpdateEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentSrv_ServiceDesc is the grpc.ServiceDesc for EnvironmentSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.EnvironmentSrv",
	HandlerType: (*EnvironmentSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EnvironmentSrv_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _EnvironmentSrv_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EnvironmentSrv_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EnvironmentSrv_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/environment.proto",
}
