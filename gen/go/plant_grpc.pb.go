// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/plant.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlantSrv_Create_FullMethodName            = "/protobuf.PlantSrv/Create"
	PlantSrv_Read_FullMethodName              = "/protobuf.PlantSrv/Read"
	PlantSrv_List_FullMethodName              = "/protobuf.PlantSrv/List"
	PlantSrv_Update_FullMethodName            = "/protobuf.PlantSrv/Update"
	PlantSrv_UploadAvatarPlant_FullMethodName = "/protobuf.PlantSrv/UploadAvatarPlant"
)

// PlantSrvClient is the client API for PlantSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantSrvClient interface {
	Create(ctx context.Context, in *CreatePlantReq, opts ...grpc.CallOption) (*CreatePlantRes, error)
	Read(ctx context.Context, in *ReadPlantReq, opts ...grpc.CallOption) (*ReadPlantRes, error)
	List(ctx context.Context, in *ListPlantReq, opts ...grpc.CallOption) (*ListPlantRes, error)
	Update(ctx context.Context, in *UpdatePlantReq, opts ...grpc.CallOption) (*UpdatePlantRes, error)
	UploadAvatarPlant(ctx context.Context, in *UploadAvatarPlantReq, opts ...grpc.CallOption) (*UploadAvatarPlantRes, error)
}

type plantSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantSrvClient(cc grpc.ClientConnInterface) PlantSrvClient {
	return &plantSrvClient{cc}
}

func (c *plantSrvClient) Create(ctx context.Context, in *CreatePlantReq, opts ...grpc.CallOption) (*CreatePlantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlantRes)
	err := c.cc.Invoke(ctx, PlantSrv_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantSrvClient) Read(ctx context.Context, in *ReadPlantReq, opts ...grpc.CallOption) (*ReadPlantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadPlantRes)
	err := c.cc.Invoke(ctx, PlantSrv_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantSrvClient) List(ctx context.Context, in *ListPlantReq, opts ...grpc.CallOption) (*ListPlantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlantRes)
	err := c.cc.Invoke(ctx, PlantSrv_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantSrvClient) Update(ctx context.Context, in *UpdatePlantReq, opts ...grpc.CallOption) (*UpdatePlantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlantRes)
	err := c.cc.Invoke(ctx, PlantSrv_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantSrvClient) UploadAvatarPlant(ctx context.Context, in *UploadAvatarPlantReq, opts ...grpc.CallOption) (*UploadAvatarPlantRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAvatarPlantRes)
	err := c.cc.Invoke(ctx, PlantSrv_UploadAvatarPlant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantSrvServer is the server API for PlantSrv service.
// All implementations must embed UnimplementedPlantSrvServer
// for forward compatibility.
type PlantSrvServer interface {
	Create(context.Context, *CreatePlantReq) (*CreatePlantRes, error)
	Read(context.Context, *ReadPlantReq) (*ReadPlantRes, error)
	List(context.Context, *ListPlantReq) (*ListPlantRes, error)
	Update(context.Context, *UpdatePlantReq) (*UpdatePlantRes, error)
	UploadAvatarPlant(context.Context, *UploadAvatarPlantReq) (*UploadAvatarPlantRes, error)
	mustEmbedUnimplementedPlantSrvServer()
}

// UnimplementedPlantSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlantSrvServer struct{}

func (UnimplementedPlantSrvServer) Create(context.Context, *CreatePlantReq) (*CreatePlantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlantSrvServer) Read(context.Context, *ReadPlantReq) (*ReadPlantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPlantSrvServer) List(context.Context, *ListPlantReq) (*ListPlantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlantSrvServer) Update(context.Context, *UpdatePlantReq) (*UpdatePlantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPlantSrvServer) UploadAvatarPlant(context.Context, *UploadAvatarPlantReq) (*UploadAvatarPlantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAvatarPlant not implemented")
}
func (UnimplementedPlantSrvServer) mustEmbedUnimplementedPlantSrvServer() {}
func (UnimplementedPlantSrvServer) testEmbeddedByValue()                  {}

// UnsafePlantSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantSrvServer will
// result in compilation errors.
type UnsafePlantSrvServer interface {
	mustEmbedUnimplementedPlantSrvServer()
}

func RegisterPlantSrvServer(s grpc.ServiceRegistrar, srv PlantSrvServer) {
	// If the following call pancis, it indicates UnimplementedPlantSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlantSrv_ServiceDesc, srv)
}

func _PlantSrv_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantSrvServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantSrv_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantSrvServer).Create(ctx, req.(*CreatePlantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantSrv_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantSrvServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantSrv_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantSrvServer).Read(ctx, req.(*ReadPlantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantSrv_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantSrvServer).List(ctx, req.(*ListPlantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantSrv_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantSrvServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantSrv_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantSrvServer).Update(ctx, req.(*UpdatePlantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlantSrv_UploadAvatarPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAvatarPlantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantSrvServer).UploadAvatarPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlantSrv_UploadAvatarPlant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantSrvServer).UploadAvatarPlant(ctx, req.(*UploadAvatarPlantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlantSrv_ServiceDesc is the grpc.ServiceDesc for PlantSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlantSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PlantSrv",
	HandlerType: (*PlantSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PlantSrv_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _PlantSrv_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PlantSrv_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PlantSrv_Update_Handler,
		},
		{
			MethodName: "UploadAvatarPlant",
			Handler:    _PlantSrv_UploadAvatarPlant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plant.proto",
}
