// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: proto/plant.proto

package protobufpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                    // ID cây trồng
	PlantName            string                 `protobuf:"bytes,2,opt,name=plant_name,json=plantName,proto3" json:"plant_name,omitempty"`                                     // Tên cây
	Type                 string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                // Loại cây
	PlantingDate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=planting_date,json=plantingDate,proto3" json:"planting_date,omitempty"`                            // Ngày trồng (epoch time)
	Height               float32                `protobuf:"fixed32,5,opt,name=height,proto3" json:"height,omitempty"`                                                          // Chiều cao cây
	HealthStatus         string                 `protobuf:"bytes,6,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`                            // Tình trạng sức khỏe cây (ví dụ: khỏe mạnh, bệnh tật, ...)
	ImageUrl             string                 `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                                        // URL hình ảnh cây trồng
	EstimatedHarvestDate int64                  `protobuf:"varint,8,opt,name=estimated_harvest_date,json=estimatedHarvestDate,proto3" json:"estimated_harvest_date,omitempty"` // Ngày dự kiến thu hoạch (epoch time)
}

func (x *PlantInfo) Reset() {
	*x = PlantInfo{}
	mi := &file_proto_plant_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantInfo) ProtoMessage() {}

func (x *PlantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantInfo.ProtoReflect.Descriptor instead.
func (*PlantInfo) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{0}
}

func (x *PlantInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlantInfo) GetPlantName() string {
	if x != nil {
		return x.PlantName
	}
	return ""
}

func (x *PlantInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlantInfo) GetPlantingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlantingDate
	}
	return nil
}

func (x *PlantInfo) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PlantInfo) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *PlantInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *PlantInfo) GetEstimatedHarvestDate() int64 {
	if x != nil {
		return x.EstimatedHarvestDate
	}
	return 0
}

type CreatePlantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantName            string                 `protobuf:"bytes,2,opt,name=plant_name,json=plantName,proto3" json:"plant_name,omitempty"`                                     // Tên cây
	Type                 string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                // Loại cây
	PlantingDate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=planting_date,json=plantingDate,proto3" json:"planting_date,omitempty"`                            // Ngày trồng (epoch time)
	Height               float32                `protobuf:"fixed32,5,opt,name=height,proto3" json:"height,omitempty"`                                                          // Chiều cao cây
	HealthStatus         string                 `protobuf:"bytes,6,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`                            // Tình trạng sức khỏe cây (ví dụ: khỏe mạnh, bệnh tật, ...)
	ImageUrl             string                 `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                                        // URL hình ảnh cây trồng
	EstimatedHarvestDate int64                  `protobuf:"varint,8,opt,name=estimated_harvest_date,json=estimatedHarvestDate,proto3" json:"estimated_harvest_date,omitempty"` // Ngày dự kiến thu hoạch (epoch time)
}

func (x *CreatePlantReq) Reset() {
	*x = CreatePlantReq{}
	mi := &file_proto_plant_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantReq) ProtoMessage() {}

func (x *CreatePlantReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantReq.ProtoReflect.Descriptor instead.
func (*CreatePlantReq) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlantReq) GetPlantName() string {
	if x != nil {
		return x.PlantName
	}
	return ""
}

func (x *CreatePlantReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreatePlantReq) GetPlantingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlantingDate
	}
	return nil
}

func (x *CreatePlantReq) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CreatePlantReq) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *CreatePlantReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CreatePlantReq) GetEstimatedHarvestDate() int64 {
	if x != nil {
		return x.EstimatedHarvestDate
	}
	return 0
}

type ReadPlantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *PlantInfo `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ReadPlantReq) Reset() {
	*x = ReadPlantReq{}
	mi := &file_proto_plant_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadPlantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlantReq) ProtoMessage() {}

func (x *ReadPlantReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlantReq.ProtoReflect.Descriptor instead.
func (*ReadPlantReq) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{2}
}

func (x *ReadPlantReq) GetFilter() *PlantInfo {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListPlantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Page    int64  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limited int64  `protobuf:"varint,5,opt,name=limited,proto3" json:"limited,omitempty"`
}

func (x *ListPlantReq) Reset() {
	*x = ListPlantReq{}
	mi := &file_proto_plant_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlantReq) ProtoMessage() {}

func (x *ListPlantReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlantReq.ProtoReflect.Descriptor instead.
func (*ListPlantReq) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{3}
}

func (x *ListPlantReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListPlantReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPlantReq) GetLimited() int64 {
	if x != nil {
		return x.Limited
	}
	return 0
}

type UpdatePlantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant *PlantInfo `protobuf:"bytes,1,opt,name=plant,proto3" json:"plant,omitempty"`
}

func (x *UpdatePlantReq) Reset() {
	*x = UpdatePlantReq{}
	mi := &file_proto_plant_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlantReq) ProtoMessage() {}

func (x *UpdatePlantReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlantReq.ProtoReflect.Descriptor instead.
func (*UpdatePlantReq) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePlantReq) GetPlant() *PlantInfo {
	if x != nil {
		return x.Plant
	}
	return nil
}

type UploadAvatarPlantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UploadAvatarPlantReq) Reset() {
	*x = UploadAvatarPlantReq{}
	mi := &file_proto_plant_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadAvatarPlantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAvatarPlantReq) ProtoMessage() {}

func (x *UploadAvatarPlantReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAvatarPlantReq.ProtoReflect.Descriptor instead.
func (*UploadAvatarPlantReq) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{5}
}

func (x *UploadAvatarPlantReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CreatePlantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreatePlantRes) Reset() {
	*x = CreatePlantRes{}
	mi := &file_proto_plant_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantRes) ProtoMessage() {}

func (x *CreatePlantRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantRes.ProtoReflect.Descriptor instead.
func (*CreatePlantRes) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePlantRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadPlantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant *PlantInfo `protobuf:"bytes,1,opt,name=plant,proto3" json:"plant,omitempty"`
}

func (x *ReadPlantRes) Reset() {
	*x = ReadPlantRes{}
	mi := &file_proto_plant_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadPlantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPlantRes) ProtoMessage() {}

func (x *ReadPlantRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPlantRes.ProtoReflect.Descriptor instead.
func (*ReadPlantRes) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{7}
}

func (x *ReadPlantRes) GetPlant() *PlantInfo {
	if x != nil {
		return x.Plant
	}
	return nil
}

type ListPlantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*PlantInfo `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *ListPlantRes) Reset() {
	*x = ListPlantRes{}
	mi := &file_proto_plant_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlantRes) ProtoMessage() {}

func (x *ListPlantRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlantRes.ProtoReflect.Descriptor instead.
func (*ListPlantRes) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{8}
}

func (x *ListPlantRes) GetPlants() []*PlantInfo {
	if x != nil {
		return x.Plants
	}
	return nil
}

type UpdatePlantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant *PlantInfo `protobuf:"bytes,1,opt,name=plant,proto3" json:"plant,omitempty"`
}

func (x *UpdatePlantRes) Reset() {
	*x = UpdatePlantRes{}
	mi := &file_proto_plant_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlantRes) ProtoMessage() {}

func (x *UpdatePlantRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlantRes.ProtoReflect.Descriptor instead.
func (*UpdatePlantRes) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePlantRes) GetPlant() *PlantInfo {
	if x != nil {
		return x.Plant
	}
	return nil
}

type UploadAvatarPlantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UploadAvatarPlantRes) Reset() {
	*x = UploadAvatarPlantRes{}
	mi := &file_proto_plant_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadAvatarPlantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAvatarPlantRes) ProtoMessage() {}

func (x *UploadAvatarPlantRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_plant_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAvatarPlantRes.ProtoReflect.Descriptor instead.
func (*UploadAvatarPlantRes) Descriptor() ([]byte, []int) {
	return file_proto_plant_proto_rawDescGZIP(), []int{10}
}

func (x *UploadAvatarPlantRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_plant_proto protoreflect.FileDescriptor

var file_proto_plant_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f,
	0x02, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x94, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x39, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd5, 0x02, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x53, 0x72, 0x76, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x42, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x42, 0x09, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0d, 0x2e,
	0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_plant_proto_rawDescOnce sync.Once
	file_proto_plant_proto_rawDescData = file_proto_plant_proto_rawDesc
)

func file_proto_plant_proto_rawDescGZIP() []byte {
	file_proto_plant_proto_rawDescOnce.Do(func() {
		file_proto_plant_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_plant_proto_rawDescData)
	})
	return file_proto_plant_proto_rawDescData
}

var file_proto_plant_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_plant_proto_goTypes = []any{
	(*PlantInfo)(nil),             // 0: protobuf.PlantInfo
	(*CreatePlantReq)(nil),        // 1: protobuf.CreatePlantReq
	(*ReadPlantReq)(nil),          // 2: protobuf.ReadPlantReq
	(*ListPlantReq)(nil),          // 3: protobuf.ListPlantReq
	(*UpdatePlantReq)(nil),        // 4: protobuf.UpdatePlantReq
	(*UploadAvatarPlantReq)(nil),  // 5: protobuf.UploadAvatarPlantReq
	(*CreatePlantRes)(nil),        // 6: protobuf.CreatePlantRes
	(*ReadPlantRes)(nil),          // 7: protobuf.ReadPlantRes
	(*ListPlantRes)(nil),          // 8: protobuf.ListPlantRes
	(*UpdatePlantRes)(nil),        // 9: protobuf.UpdatePlantRes
	(*UploadAvatarPlantRes)(nil),  // 10: protobuf.UploadAvatarPlantRes
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_proto_plant_proto_depIdxs = []int32{
	11, // 0: protobuf.PlantInfo.planting_date:type_name -> google.protobuf.Timestamp
	11, // 1: protobuf.CreatePlantReq.planting_date:type_name -> google.protobuf.Timestamp
	0,  // 2: protobuf.ReadPlantReq.filter:type_name -> protobuf.PlantInfo
	0,  // 3: protobuf.UpdatePlantReq.plant:type_name -> protobuf.PlantInfo
	0,  // 4: protobuf.ReadPlantRes.plant:type_name -> protobuf.PlantInfo
	0,  // 5: protobuf.ListPlantRes.plants:type_name -> protobuf.PlantInfo
	0,  // 6: protobuf.UpdatePlantRes.plant:type_name -> protobuf.PlantInfo
	1,  // 7: protobuf.PlantSrv.Create:input_type -> protobuf.CreatePlantReq
	2,  // 8: protobuf.PlantSrv.Read:input_type -> protobuf.ReadPlantReq
	3,  // 9: protobuf.PlantSrv.List:input_type -> protobuf.ListPlantReq
	4,  // 10: protobuf.PlantSrv.Update:input_type -> protobuf.UpdatePlantReq
	10, // 11: protobuf.PlantSrv.UploadAvatarPlant:input_type -> protobuf.UploadAvatarPlantRes
	6,  // 12: protobuf.PlantSrv.Create:output_type -> protobuf.CreatePlantRes
	7,  // 13: protobuf.PlantSrv.Read:output_type -> protobuf.ReadPlantRes
	8,  // 14: protobuf.PlantSrv.List:output_type -> protobuf.ListPlantRes
	9,  // 15: protobuf.PlantSrv.Update:output_type -> protobuf.UpdatePlantRes
	10, // 16: protobuf.PlantSrv.UploadAvatarPlant:output_type -> protobuf.UploadAvatarPlantRes
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_plant_proto_init() }
func file_proto_plant_proto_init() {
	if File_proto_plant_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_plant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_plant_proto_goTypes,
		DependencyIndexes: file_proto_plant_proto_depIdxs,
		MessageInfos:      file_proto_plant_proto_msgTypes,
	}.Build()
	File_proto_plant_proto = out.File
	file_proto_plant_proto_rawDesc = nil
	file_proto_plant_proto_goTypes = nil
	file_proto_plant_proto_depIdxs = nil
}
